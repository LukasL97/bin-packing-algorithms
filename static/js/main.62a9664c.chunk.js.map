{"version":3,"sources":["components/Header.jsx","components/Input/NumericalInputFormRow.jsx","utils/AlgorithmStrategies.js","components/Input/AlgorithmInput/StrategySelectorFormRow.jsx","components/Input/ToggleFormRow.jsx","client/BackendClient.js","components/Input/AlgorithmInput/InstanceLoaderFormRow.jsx","components/Input/AlgorithmInput/AlgorithmInputForm.jsx","components/Box.jsx","components/AlgorithmDisplay.jsx","components/Input/VisualizationConfig/ManualStepIndexMoverFormRow.jsx","components/Input/VisualizationConfig/VisualizationConfigForm.jsx","components/AlgorithmProgressChart.jsx","components/Content.jsx","components/App.jsx","index.js"],"names":["Header","className","NumericalInputFormRow","props","label","name","value","onChange","htmlFor","id","type","AlgorithmStrategies","this","getAll","StrategySelectorFormRow","strategies","map","strat","onLoad","ToggleFormRow","onToggle","useState","checked","setChecked","onClick","BackendClient","apiUrl","process","axios","defaults","baseURL","console","info","strategy","boxLength","numRectangles","minWidth","maxWidth","minHeight","maxHeight","timeLimit","callback","trace","put","rectanglesWidthRange","min","max","rectanglesHeightRange","then","startSolutionStep","instanceId","runId","minStep","maxStep","combined","get","params","solutionSteps","instances","InstanceLoaderFormRow","state","backendClient","setState","oldState","fetchAllInstances","loadInstancesIntoState","data","setDefaultInstanceId","length","event","target","instance","find","i","handleInstanceChange","refreshInstances","creationDate","bind","Component","AlgorithmInputForm","handleNumericalInputChange","handleInputChange","parseInt","handleTextualInputChange","v","getDefaultStrategyId","useExistingInstance","valueParser","inputId","preventDefault","startFromInstance","start","nam","handleLoadExistingInstanceChange","startWithoutPageRefresh","Box","boxFillColor","boxBorderColor","rectangleFillColorBase","rectangleFillColorUpdated","rectangleBorderColor","rectangleOpacity","rectangleId","changedRectangleIds","includes","unitLength","pixelLength","getRectangles","getShowRectangleIds","unitToPixel","unit","rectangles","rectangle","x","y","width","height","fill","getRectangleColor","stroke","opacity","text","fontSize","padding","AlgorithmDisplay","getCurrentSolutionStep","placement","step","update","jsonClass","permutation","showAllBoxes","maxShownBoxes","boxPixelLength","boxId","filter","placing","box","coordinates","boxes","Set","rectangleIds","newSolutionStep","solution","log","getChangedRectangleIds","numBoxes","Math","getUnique","sort","box1","box2","style","color","reduce","prev","curr","handleShowAllBoxesChange","ManualStepIndexMoverFormRow","getCurrentStepIndex","moveCurrentStepIndex","displayedStepIndex","setDisplayedStepIndex","moveCurrentStepIndexWithoutPageRefresh","index","onBlur","onKeyPress","key","blur","VisualizationConfigForm","visualizationIterationPeriod","visualizationIterationPeriodDefault","newPeriod","updateVisualizationIterationPeriod","toggleAutomaticVisualization","toggleCombineSteps","toggleShowRectangleIds","handleCombineStepsChange","handleShowRectangleIdsChange","handleAutoModeChange","getAutomaticVisualization","handleMsPerIterationChange","AlgorithmProgressChart","progress","getProgress","series","fetched","visualized","options","chart","colors","plotOptions","bar","borderRadius","horizontal","dataLabels","xaxis","categories","finished","Content","last","array","App","fetchSolutionStepsPeriod","fetchSolutionStepsCount","fetchCombinedSolutionStepsCount","running","fetchBlocked","currentStepIndex","automaticVisualization","combineSteps","showRectangleIds","undefined","startAlgorithm","loadStartSolutionStepIntoState","startAlgorithmFromInstance","blockFetch","fetchSolutionSteps","lastLoadedStep","actualIndex","isNaN","active","clearInterval","moveCurrentStepIndexInterval","setInterval","fetchSolutionStepsInterval","updateMoveCurrentStepIndexInterval","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62a9664c.chunk.js","sourcesContent":["const Header = () => {\n  return (\n    <div className=\"header-container\">\n      <header>\n        <h1>Bin Packing Algorithms</h1>\n      </header>\n    </div>\n  )\n}\n\nexport default Header\n","const NumericalInputFormRow = (props) => {\n\n  const {label, name, value, onChange} = props\n\n  return (\n    <div className=\"form-row labeled-form-row numerical-input-form-row\">\n      <label className=\"form-row-label\" htmlFor={name}>{label}</label>\n      <input id={name} name={name} type=\"number\" value={value} onChange={onChange}/>\n    </div>\n  )\n}\n\nexport default NumericalInputFormRow","class AlgorithmStrategies {\n\n  static getAll() {\n    return [\n      // {\n      //   id: 'greedy randomSelection',\n      //   name: 'Greedy - Random Selection'\n      // },\n      // {\n      //   id: 'greedy sizeOrdered',\n      //   name: 'Greedy - Size-ordered'\n      // },\n      // {\n      //   id: 'greedy2 randomSelection',\n      //   name: 'Quick Greedy - Random Selection'\n      // },\n      {\n        id: 'greedy2 sizeOrdered',\n        name: 'Greedy - Size-ordered'\n      },\n      {\n        id: 'greedy boxClosing',\n        name: 'Greedy - Box Closing'\n      },\n      // {\n      //   id: 'localSearch geometryBased',\n      //   name: 'Local Search - Geometry-based'\n      // },\n      // {\n      //   id: 'localSearch eventuallyFeasibleGeometryBased',\n      //   name: 'Local Search - Geometry-based (eventually feasible)'\n      // },\n      {\n        id: 'localSearch boxMerging',\n        name: 'Local Search - Geometric'\n      },\n      {\n        id: 'localSearch overlapping',\n        name: 'Local Search - Overlapping'\n      },\n      {\n        id: 'localSearch rectanglePermutation',\n        name: 'Local Search - Rectangle Permutation'\n      }\n    ]\n  }\n\n  static getDefaultStrategyId() {\n    return this.getAll()[0].id\n  }\n\n}\n\nexport default AlgorithmStrategies\n","import AlgorithmStrategies from '../../../utils/AlgorithmStrategies'\n\nconst StrategySelectorFormRow = (props) => {\n\n  const strategies = AlgorithmStrategies.getAll().map(strat =>\n    <option key={strat.id} value={strat.id}>{strat.name}</option>\n  )\n\n  return (\n    <div className='strategy-selector drop-down-form-row'>\n      <select id='strategy' name='strategy' onChange={props.onChange} onLoad={props.onChange}>\n        {strategies}\n      </select>\n    </div>\n  )\n}\n\nexport default StrategySelectorFormRow","import React, {useState} from 'react'\n\nconst ToggleFormRow = (props) => {\n\n  const {label, name, value, onToggle} = props\n\n  const [checked, setChecked] = useState(value)\n\n  return (\n    <div className=\"form-row labeled-form-row toggle-form-row\">\n      <label className=\"form-row-label\" htmlFor={name}>{label}</label>\n      <label className=\"switch\">\n        <input\n          id={name}\n          name={name}\n          type=\"checkbox\"\n          onClick={() => setChecked(!checked)}\n          checked={checked}\n          onChange={onToggle}\n        />\n        <span className=\"slider round\"/>\n      </label>\n    </div>\n  )\n}\n\nexport default ToggleFormRow","import axios from 'axios'\n\nclass BackendClient {\n\n  constructor() {\n    let apiUrl = process.env.REACT_APP_API_URL\n    if (typeof apiUrl == 'undefined') {\n      apiUrl = 'http://localhost:9000'\n    }\n    axios.defaults.baseURL = apiUrl\n    console.info('Setup API connection to ' + axios.defaults.baseURL)\n  }\n\n  startAlgorithm(strategy, boxLength, numRectangles, minWidth, maxWidth, minHeight, maxHeight, timeLimit) {\n    return (callback) => {\n      console.trace('Starting algorithm')\n      axios.put(\n        '/binPacking/start',\n        {\n          strategy: strategy,\n          boxLength: boxLength,\n          numRectangles: numRectangles,\n          rectanglesWidthRange: {\n            min: minWidth,\n            max: maxWidth\n          },\n          rectanglesHeightRange: {\n            min: minHeight,\n            max: maxHeight\n          },\n          timeLimit: timeLimit\n        }\n      ).then(startSolutionStep => callback(startSolutionStep))\n    }\n  }\n\n  startAlgorithmFromInstance(strategy, instanceId, timeLimit) {\n    return (callback) => {\n      console.trace('Starting algorithm from instance with id ' + instanceId)\n      axios.put(\n        '/binPacking/startFromInstance',\n        {\n          strategy: strategy,\n          instanceId: instanceId,\n          timeLimit: timeLimit\n        }\n      ).then(startSolutionStep => callback(startSolutionStep))\n    }\n  }\n\n  fetchSolutionSteps(runId, minStep, maxStep, combined) {\n    return (callback) => {\n      console.trace('Fetching steps ' + minStep + ' - ' + maxStep + ' for runId ' + runId)\n      axios.get(\n        '/binPacking/steps',\n        {\n          params: {\n            runId: runId,\n            minStep: minStep,\n            maxStep: maxStep,\n            combined: combined\n          }\n        }\n      ).then(solutionSteps => callback(solutionSteps))\n    }\n  }\n\n  fetchAllInstances() {\n    return (callback) => {\n      console.trace('Fetch all instances')\n      axios.get(\n        '/instances'\n      ).then(instances => callback(instances))\n    }\n  }\n\n}\n\nexport default BackendClient","import React, {Component} from 'react'\nimport BackendClient from '../../../client/BackendClient'\n\nclass InstanceLoaderFormRow extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      instances: []\n    }\n    this.backendClient = new BackendClient()\n  }\n\n  loadInstancesIntoState(instances) {\n    this.setState(oldState => (\n      {\n        ...oldState,\n        instances: instances\n      }\n    ))\n  }\n\n  refreshInstances() {\n    this.backendClient.fetchAllInstances()(instances => {\n      this.loadInstancesIntoState(instances.data)\n      this.props.setDefaultInstanceId(this.state.instances.length > 0 ? this.state.instances[0].id : '')\n    })\n  }\n\n  handleInstanceChange(event) {\n    const id = event.target.value\n    const instance = this.state.instances.find(i => i.id === id)\n    this.props.handleInstanceChange(\n      id,\n      instance.boxLength,\n      instance.numRectangles,\n      instance.minWidth,\n      instance.maxWidth,\n      instance.minHeight,\n      instance.maxHeight\n    )\n  }\n\n  componentDidMount() {\n    this.refreshInstances()\n  }\n\n  render() {\n    const instances = this.state.instances.map(instance =>\n      <option key={instance.id} value={instance.id}>\n        {instance.creationDate + ' (' + instance.boxLength + ', ' + instance.numRectangles + ', ' + instance.minWidth + ', ' + instance.maxWidth + ', ' + instance.minHeight + ', ' + instance.maxHeight + ')'}\n      </option>\n    )\n\n    return (\n      <div className='instance-loader drop-down-form-row'>\n        <select\n          id='instance'\n          name='instance'\n          onChange={this.handleInstanceChange.bind(this)}\n          onLoad={this.handleInstanceChange.bind(this)}\n        >\n          {instances}\n        </select>\n      </div>\n    )\n  }\n\n}\n\nexport default InstanceLoaderFormRow","import React, {Component} from 'react'\nimport NumericalInputFormRow from '../NumericalInputFormRow'\nimport StrategySelectorFormRow from './StrategySelectorFormRow'\nimport AlgorithmStrategies from '../../../utils/AlgorithmStrategies'\nimport ToggleFormRow from '../ToggleFormRow'\nimport InstanceLoaderFormRow from './InstanceLoaderFormRow'\n\nclass AlgorithmInputForm extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      strategy: AlgorithmStrategies.getDefaultStrategyId(),\n      boxLength: '',\n      numRectangles: '',\n      minWidth: '',\n      maxWidth: '',\n      minHeight: '',\n      maxHeight: '',\n      timeLimit: '',\n      useExistingInstance: false,\n      instance: ''\n    }\n  }\n\n  handleInputChange(valueParser) {\n    return (inputId) => {\n      return (event) => {\n        this.setState(oldState => (\n          {\n            ...oldState,\n            [inputId]: valueParser(event.target.value)\n          }\n        ))\n      }\n    }\n  }\n\n  handleNumericalInputChange = this.handleInputChange(parseInt)\n  handleTextualInputChange = this.handleInputChange(v => v)\n\n  startWithoutPageRefresh(event) {\n    event.preventDefault()\n    const timeLimit = this.state.timeLimit === '' ? null : this.state.timeLimit * 1000\n    if (this.state.useExistingInstance) {\n      this.props.startFromInstance(\n        this.state.strategy,\n        this.state.instance,\n        timeLimit\n      )\n    } else {\n      this.props.start(\n        this.state.strategy,\n        this.state.boxLength,\n        this.state.numRectangles,\n        this.state.minWidth,\n        this.state.maxWidth,\n        this.state.minHeight,\n        this.state.maxHeight,\n        timeLimit\n      )\n    }\n  }\n\n  handleLoadExistingInstanceChange(event) {\n    this.setState(oldState => (\n      {\n        ...oldState,\n        useExistingInstance: event.target.checked\n      }\n    ))\n  }\n\n  handleInstanceChange(id, boxLength, numRectangles, minWidth, maxWidth, minHeight, maxHeight) {\n    this.setState(oldState => (\n      {\n        ...oldState,\n        boxLength: boxLength,\n        numRectangles: numRectangles,\n        minWidth: minWidth,\n        maxWidth: maxWidth,\n        minHeight: minHeight,\n        maxHeight: maxHeight,\n        instance: id\n      }\n    ))\n  }\n\n  setDefaultInstanceId(id) {\n    this.setState(oldState => (\n      {\n        ...oldState,\n        instance: id\n      }\n    ))\n  }\n\n  render() {\n\n    return (\n      <div className=\"input-container-element input-form\">\n        <h3>Algorithm Input</h3>\n        <form>\n          <StrategySelectorFormRow onChange={this.handleTextualInputChange('strategy').bind(this)}/>\n          <ToggleFormRow\n            label={'Load existing instance'}\n            nam={'load-existing-instance'}\n            value={false}\n            onToggle={this.handleLoadExistingInstanceChange.bind(this)}\n          />\n          {\n            this.state.useExistingInstance ?\n              <InstanceLoaderFormRow\n                handleInstanceChange={this.handleInstanceChange.bind(this)}\n                setDefaultInstanceId={this.setDefaultInstanceId.bind(this)}\n              /> :\n              null\n          }\n          <NumericalInputFormRow\n            label={'Box Length'}\n            name={'box-length'}\n            value={this.state.boxLength}\n            onChange={this.handleNumericalInputChange('boxLength').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={'Number of Rectangles'}\n            name={'num-rectangles'}\n            value={this.state.numRectangles}\n            onChange={this.handleNumericalInputChange('numRectangles').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={'Min. Width'}\n            name={'min-width'}\n            value={this.state.minWidth}\n            onChange={this.handleNumericalInputChange('minWidth').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={'Max. Width'}\n            name={'max-width'}\n            value={this.state.maxWidth}\n            onChange={this.handleNumericalInputChange('maxWidth').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={'Min. Height'}\n            name={'min-height'}\n            value={this.state.minHeight}\n            onChange={this.handleNumericalInputChange('minHeight').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={'Max. Height'}\n            name={'max-height'}\n            value={this.state.maxHeight}\n            onChange={this.handleNumericalInputChange('maxHeight').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={'Time Limit (in s)'}\n            name={'time-limit'}\n            value={this.state.timeLimit}\n            onChange={this.handleNumericalInputChange('timeLimit').bind(this)}\n          />\n          <div className=\"input-form-button-container\">\n            <button onClick={this.startWithoutPageRefresh.bind(this)}>Start</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n\n}\n\nexport default AlgorithmInputForm","import React, {Component} from 'react'\nimport {Group, Layer, Rect, Stage, Text} from 'react-konva'\n\nclass Box extends Component {\n\n  boxFillColor = 'white'\n  boxBorderColor = 'black'\n\n  rectangleFillColorBase = 'grey'\n  rectangleFillColorUpdated = 'red'\n  rectangleBorderColor = 'black'\n  rectangleOpacity = 0.7\n\n  getRectangleColor(rectangleId, changedRectangleIds) {\n    if (changedRectangleIds.includes(rectangleId)) {\n      return this.rectangleFillColorUpdated\n    } else {\n      return this.rectangleFillColorBase\n    }\n  }\n\n  render() {\n    const {id, unitLength, pixelLength, getRectangles, changedRectangleIds, getShowRectangleIds} = this.props\n\n    function unitToPixel(unit) {\n      return unit / unitLength * pixelLength\n    }\n\n    function getRectShape(rectangle) {\n      return (\n        <Group\n          x={unitToPixel(rectangle.x)}\n          y={unitToPixel(rectangle.y)}\n          width={unitToPixel(rectangle.width)}\n          height={unitToPixel(rectangle.height)}\n        >\n          <Rect\n            width={unitToPixel(rectangle.width)}\n            height={unitToPixel(rectangle.height)}\n            fill={this.getRectangleColor(rectangle.id, changedRectangleIds)}\n            stroke={this.rectangleBorderColor}\n            opacity={this.rectangleOpacity}\n          />\n          {getShowRectangleIds() ? <Text\n            text={rectangle.id}\n            fontSize={10}\n            padding={3}\n          /> : null}\n        </Group>\n      )\n    }\n\n    const rectangles = getRectangles().map(getRectShape.bind(this))\n\n    return (\n      <div className=\"box\" id={id}>\n        <Stage width={pixelLength} height={pixelLength}>\n          <Layer>\n            <Rect\n              x={0}\n              y={0}\n              width={pixelLength}\n              height={pixelLength}\n              fill={this.boxFillColor}\n              stroke={this.boxBorderColor}\n            />\n            <Group x={0} y={0}>\n              {rectangles}\n            </Group>\n          </Layer>\n        </Stage>\n      </div>\n    )\n  }\n}\n\nexport default Box","import React, {Component} from 'react'\nimport Box from './Box'\nimport ToggleFormRow from './Input/ToggleFormRow'\n\nclass AlgorithmDisplay extends Component {\n\n  getCurrentSolutionStep = this.props.getCurrentSolutionStep\n  getShowRectangleIds = this.props.getShowRectangleIds\n\n  state = {\n    placement: [],\n    step: 0,\n    update: {jsonClass: 'UnchangedSolution'},\n    permutation: null,\n    showAllBoxes: false\n  }\n\n  maxShownBoxes = 50\n\n  boxPixelLength = 300\n\n  getRectangles(boxId) {\n    return () => this.state.placement\n      .filter(placing => placing.box.id === boxId)\n      .map(placing => {\n        return {\n          x: placing.coordinates.x,\n          y: placing.coordinates.y,\n          width: placing.rectangle.width,\n          height: placing.rectangle.height,\n          id: placing.rectangle.id\n        }\n      })\n  }\n\n  getUnique(boxes) {\n    return [...new Set(boxes.map(box => box.id))].map(id => boxes.find(box => box.id === id))\n  }\n\n  getChangedRectangleIds(update) {\n    if (update.jsonClass === 'RectanglesChanged') {\n      return update.rectangleIds\n    } else {\n      return []\n    }\n  }\n\n  handleShowAllBoxesChange(event) {\n    this.setState(oldState => ({\n      ...oldState,\n      showAllBoxes: event.target.checked\n    }))\n  }\n\n  render() {\n\n    const newSolutionStep = this.getCurrentSolutionStep()\n\n    if (newSolutionStep && newSolutionStep.solution.placement !== this.state.placement) {\n      this.setState(oldState => ({\n        ...oldState,\n        placement: newSolutionStep.solution.placement,\n        step: newSolutionStep.step,\n        update: newSolutionStep.solution.update,\n        permutation: (newSolutionStep.solution.permutation ? newSolutionStep.solution.permutation : null)\n      }))\n      console.log('Visualize solution step ' + newSolutionStep.step + ' for run with id ' + newSolutionStep.runId)\n    }\n\n    const changedRectangleIds = this.getChangedRectangleIds(this.state.update)\n\n    const numBoxes = this.state.placement.length > 0 ? Math.max(...this.state.placement.map(placing => placing.box.id)) : 0\n\n    const boxes = this.getUnique(this.state.placement.map(placing => placing.box))\n      .filter(box => this.state.showAllBoxes || box.id <= this.maxShownBoxes)\n      .sort((box1, box2) => box1.id - box2.id)\n      .map(box => (\n        <Box\n          id={box.id}\n          unitLength={box.length}\n          pixelLength={this.boxPixelLength}\n          getRectangles={this.getRectangles(box.id)}\n          changedRectangleIds={changedRectangleIds}\n          getShowRectangleIds={this.getShowRectangleIds}\n        />\n      ))\n\n    let permutation = null\n    if (this.getShowRectangleIds() && this.state.permutation !== null) {\n      permutation = this.state.permutation.map(id => {\n        const idChanged = changedRectangleIds.includes(id)\n        if (idChanged) {\n          return <span style={{color: 'red'}}><strong>{id}</strong></span>\n        } else {\n          return <span style={{color: 'black'}}>{id}</span>\n        }\n      }).reduce((prev, curr) => [prev, ', ', curr])\n    }\n\n    return (\n      <div className=\"algorithm-display\">\n        <div className=\"show-all-boxes-container\">\n          {numBoxes > this.maxShownBoxes ?\n            <ToggleFormRow\n              label={'Show all ' + numBoxes + ' boxes'}\n              name={'show-all-boxes'}\n              value={false}\n              onToggle={this.handleShowAllBoxesChange.bind(this)}\n            /> :\n            null\n          }\n        </div>\n        <div className=\"step-container\">\n          <p>\n            Step: {this.state.step}\n          </p>\n        </div>\n        <div className=\"permutation-container\">\n          <p>\n            {permutation}\n          </p>\n        </div>\n        <div className=\"boxes-container\">\n          {boxes}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default AlgorithmDisplay","import React, {useState} from 'react'\n\nconst ManualStepIndexMoverFormRow = (props) => {\n\n  const {getCurrentStepIndex, moveCurrentStepIndex} = props\n\n  const [displayedStepIndex, setDisplayedStepIndex] = useState(getCurrentStepIndex())\n\n  function moveCurrentStepIndexWithoutPageRefresh(index) {\n    return event => {\n      event.preventDefault()\n      moveCurrentStepIndex(parseInt(index))\n      setDisplayedStepIndex(parseInt(index))\n    }\n  }\n\n  return (\n    <div className=\"form-row manual-step-index-mover-form-row\">\n      <div className=\"manual-step-index-mover-form-row-element\">\n        <button onClick={moveCurrentStepIndexWithoutPageRefresh(getCurrentStepIndex() - 1)}>Previous</button>\n      </div>\n      <div className=\"manual-step-index-mover-form-row-element\">\n        <input\n          id=\"current-step-index\" name=\"current-step-index\" type=\"number\" value={displayedStepIndex}\n          onBlur={() => moveCurrentStepIndex(displayedStepIndex)}\n          onKeyPress={event => {\n            if (event.key === 'Enter') {\n              event.preventDefault()\n              event.target.blur()\n            }\n          }}\n          onChange={event => setDisplayedStepIndex(parseInt(event.target.value))}\n        />\n      </div>\n      <div className=\"manual-step-index-mover-form-row-element\">\n        <button onClick={moveCurrentStepIndexWithoutPageRefresh(getCurrentStepIndex() + 1)}>Next</button>\n      </div>\n    </div>\n  )\n\n}\n\nexport default ManualStepIndexMoverFormRow","import React, {Component} from 'react'\nimport NumericalInputFormRow from '../NumericalInputFormRow'\nimport ToggleFormRow from '../ToggleFormRow'\nimport ManualStepIndexMoverFormRow from './ManualStepIndexMoverFormRow'\n\nclass VisualizationConfigForm extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      visualizationIterationPeriod: this.props.visualizationIterationPeriodDefault\n    }\n  }\n\n  handleMsPerIterationChange(event) {\n    const newPeriod = event.target.value\n    this.setState({\n      visualizationIterationPeriod: newPeriod\n    })\n    this.props.updateVisualizationIterationPeriod(newPeriod)\n  }\n\n  handleAutoModeChange(event) {\n    this.props.toggleAutomaticVisualization(event.target.checked)\n  }\n\n  handleCombineStepsChange(event) {\n    this.props.toggleCombineSteps(event.target.checked)\n  }\n\n  handleShowRectangleIdsChange(event) {\n    this.props.toggleShowRectangleIds(event.target.checked)\n  }\n\n  render() {\n    return (\n      <div className=\"input-container-element visualization-config-form\">\n        <h3>Visualization Config</h3>\n        <form>\n          <ToggleFormRow\n            label={'Combine Steps'}\n            name={'combine-steps'}\n            value={false}\n            onToggle={this.handleCombineStepsChange.bind(this)}\n          />\n          <ToggleFormRow\n            label={'Show Rectangle IDs'}\n            name={'show-rectangle-ids'}\n            value={false}\n            onToggle={this.handleShowRectangleIdsChange.bind(this)}\n          />\n          <ToggleFormRow\n            label={'Auto Mode'}\n            name={'auto-mode'}\n            value={true}\n            onToggle={this.handleAutoModeChange.bind(this)}\n          />\n          {\n            this.props.getAutomaticVisualization() ?\n              <NumericalInputFormRow\n                label={'ms / Iteration'}\n                name={'ms-per-iteration'}\n                value={this.state.visualizationIterationPeriod}\n                onChange={this.handleMsPerIterationChange.bind(this)}\n              /> :\n              <ManualStepIndexMoverFormRow\n                getCurrentStepIndex={this.props.getCurrentStepIndex}\n                moveCurrentStepIndex={this.props.moveCurrentStepIndex}\n              />\n          }\n        </form>\n      </div>\n    )\n  }\n\n}\n\nexport default VisualizationConfigForm\n","import Chart from 'react-apexcharts'\nimport React from 'react'\n\nconst AlgorithmProgressChart = (props) => {\n\n  const progress = props.getProgress()\n\n  const series = [{\n    data: [progress.fetched, progress.visualized]\n  }]\n\n  const options = {\n    chart: {\n      type: 'bar'\n    },\n    colors: ['#5995DA'],\n    plotOptions: {\n      bar: {\n        borderRadius: 4,\n        horizontal: true\n      }\n    },\n    dataLabels: {\n      style: {\n        colors: ['black']\n      }\n    },\n    xaxis: {\n      categories: [\n        'Fetched',\n        'Visualized'\n      ]\n    }\n  }\n\n  return (\n    <div className=\"input-container-element progress-chart-container\">\n      <h3>Algorithm Progress</h3>\n      <Chart options={options} series={series} type=\"bar\"/>\n      <div className=\"progress-chart-finished-indicators\">\n        {progress.finished ? <p>Fetching complete</p> : null}\n        {(progress.finished && progress.visualized === progress.fetched) ? <p>Visualization complete</p> : null}\n      </div>\n    </div>\n  )\n\n}\n\nexport default AlgorithmProgressChart","import React, {Component} from 'react'\nimport AlgorithmInputForm from './Input/AlgorithmInput/AlgorithmInputForm'\nimport AlgorithmDisplay from './AlgorithmDisplay'\nimport VisualizationConfigForm from './Input/VisualizationConfig/VisualizationConfigForm'\nimport AlgorithmProgressChart from './AlgorithmProgressChart'\n\n\nclass Content extends Component {\n\n  render() {\n    const {\n      getCurrentSolutionStep,\n      start,\n      startFromInstance,\n      toggleCombineSteps,\n      toggleShowRectangleIds,\n      getShowRectangleIds,\n      visualizationIterationPeriodDefault,\n      updateVisualizationIterationPeriod,\n      toggleAutomaticVisualization,\n      getAutomaticVisualization,\n      getCurrentStepIndex,\n      moveCurrentStepIndex,\n      getProgress\n    } = this.props\n\n    return (\n      <div className=\"content-container\">\n        <div className=\"input-container\">\n          <AlgorithmInputForm start={start} startFromInstance={startFromInstance}/>\n          <VisualizationConfigForm\n            toggleCombineSteps={toggleCombineSteps}\n            toggleShowRectangleIds={toggleShowRectangleIds}\n            visualizationIterationPeriodDefault={visualizationIterationPeriodDefault}\n            updateVisualizationIterationPeriod={updateVisualizationIterationPeriod}\n            toggleAutomaticVisualization={toggleAutomaticVisualization}\n            getAutomaticVisualization={getAutomaticVisualization}\n            getCurrentStepIndex={getCurrentStepIndex}\n            moveCurrentStepIndex={moveCurrentStepIndex}\n          />\n          <AlgorithmProgressChart getProgress={getProgress}/>\n        </div>\n        <AlgorithmDisplay\n          getCurrentSolutionStep={getCurrentSolutionStep}\n          getShowRectangleIds={getShowRectangleIds}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Content\n","import React, {Component} from 'react'\nimport Header from './Header'\nimport Content from './Content'\nimport BackendClient from '../client/BackendClient'\n\nclass App extends Component {\n\n  fetchSolutionStepsPeriod = 100\n  fetchSolutionStepsCount = 100\n  fetchCombinedSolutionStepsCount = 10000\n  visualizationIterationPeriodDefault = 100\n\n  backendClient = new BackendClient()\n\n  state = {\n    running: false,\n    runId: '',\n    fetchBlocked: false,\n    solutionSteps: [],\n    currentStepIndex: 0,\n    automaticVisualization: true,\n    combineSteps: false,\n    showRectangleIds: false\n  }\n\n  getCurrentSolutionStep = () => this.state.solutionSteps[this.state.currentStepIndex]\n\n  getProgress = () => {\n    const fetched = this.state.solutionSteps.length - 1\n    const visualized = this.state.currentStepIndex\n    const finished = last(this.state.solutionSteps)?.finished\n    return {\n      fetched: fetched < 0 ? 0 : fetched,\n      visualized: visualized !== undefined ? visualized : 0,\n      finished: finished !== undefined ? finished : false\n    }\n  }\n\n  start = (\n    strategy,\n    boxLength,\n    numRectangles,\n    minWidth,\n    maxWidth,\n    minHeight,\n    maxHeight,\n    timeLimit\n  ) => {\n    this.backendClient.startAlgorithm(\n      strategy,\n      boxLength,\n      numRectangles,\n      minWidth,\n      maxWidth,\n      minHeight,\n      maxHeight,\n      timeLimit\n    )(this.loadStartSolutionStepIntoState.bind(this))\n  }\n\n  startFromInstance = (strategy, instanceId, timeLimit) => {\n    this.backendClient.startAlgorithmFromInstance(strategy, instanceId, timeLimit)(\n      this.loadStartSolutionStepIntoState.bind(this)\n    )\n  }\n\n  loadStartSolutionStepIntoState(startSolutionStep) {\n    console.log(startSolutionStep)\n    this.setState(oldState => ({\n      ...oldState,\n      running: true,\n      runId: startSolutionStep.data.runId,\n      solutionSteps: [startSolutionStep.data],\n      currentStepIndex: 0\n    }))\n  }\n\n  blockFetch = () => {\n    this.setState(oldState => ({\n      ...oldState,\n      fetchBlocked: true\n    }))\n  }\n\n  fetchSolutionSteps = () => {\n    this.blockFetch() // block fetching until fetched data is retrieved via the api and stored in the queue\n    const lastLoadedStep = last(this.state.solutionSteps).step\n    this.backendClient.fetchSolutionSteps(\n      this.state.runId,\n      lastLoadedStep + 1,\n      lastLoadedStep + (this.state.combineSteps ? this.fetchCombinedSolutionStepsCount : this.fetchSolutionStepsCount),\n      this.state.combineSteps\n    )(solutionSteps => {\n      const finished = solutionSteps.data.length > 0 && last(solutionSteps.data).finished\n      this.setState(oldState => ({\n        ...oldState,\n        running: !finished,\n        fetchBlocked: false,\n        solutionSteps: [\n          ...this.state.solutionSteps,\n          ...solutionSteps.data\n        ]\n      }))\n    })\n  }\n\n  toggleCombineSteps(active) {\n    this.setState(oldState => ({\n      ...oldState,\n      combineSteps: active\n    }))\n  }\n\n  moveCurrentStepIndex = (index) => {\n    if (this.state.solutionSteps.length === 0) {\n      return\n    }\n    let actualIndex = index\n    if (index === undefined || index === '' || isNaN(index) || index < 0) {\n      actualIndex = 0\n    }\n    if (index >= this.state.solutionSteps.length) {\n      actualIndex = this.state.solutionSteps.length - 1\n    }\n    this.setState(oldState => ({\n      ...oldState,\n      currentStepIndex: actualIndex,\n    }))\n  }\n\n  updateMoveCurrentStepIndexInterval(visualizationIterationPeriod) {\n    clearInterval(this.moveCurrentStepIndexInterval)\n    this.moveCurrentStepIndexInterval = setInterval(\n      () => {\n        if (this.state.automaticVisualization) {\n          this.moveCurrentStepIndex(this.state.currentStepIndex + 1)\n        }\n      },\n      visualizationIterationPeriod\n    )\n  }\n\n  toggleAutomaticVisualization(active) {\n    this.setState(oldState => ({\n      ...oldState,\n      automaticVisualization: active\n    }))\n  }\n\n  toggleShowRectangleIds(active) {\n    this.setState(oldState => ({\n      ...oldState,\n      showRectangleIds: active\n    }))\n  }\n\n  getAutomaticVisualization = () => this.state.automaticVisualization\n  getCurrentStepIndex = () => this.state.currentStepIndex\n  getShowRectangleIds = () => this.state.showRectangleIds\n\n  componentDidMount() {\n    this.fetchSolutionStepsInterval = setInterval(\n      () => {\n        if (this.state.running && !this.state.fetchBlocked) {\n          this.fetchSolutionSteps()\n        }\n      },\n      this.fetchSolutionStepsPeriod\n    )\n    this.moveCurrentStepIndexInterval = setInterval(\n      () => {\n        if (this.state.automaticVisualization) {\n          this.moveCurrentStepIndex(this.state.currentStepIndex + 1)\n        }\n      },\n      this.visualizationIterationPeriodDefault\n    )\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetchSolutionStepsInterval)\n    clearInterval(this.moveCurrentStepIndexInterval)\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <Header/>\n        <Content\n          getCurrentSolutionStep={this.getCurrentSolutionStep}\n          start={this.start}\n          startFromInstance={this.startFromInstance}\n          toggleCombineSteps={this.toggleCombineSteps.bind(this)}\n          toggleShowRectangleIds={this.toggleShowRectangleIds.bind(this)}\n          getShowRectangleIds={this.getShowRectangleIds.bind(this)}\n          visualizationIterationPeriodDefault={this.visualizationIterationPeriodDefault}\n          updateVisualizationIterationPeriod={this.updateMoveCurrentStepIndexInterval.bind(this)}\n          toggleAutomaticVisualization={this.toggleAutomaticVisualization.bind(this)}\n          getAutomaticVisualization={this.getAutomaticVisualization.bind(this)}\n          getCurrentStepIndex={this.getCurrentStepIndex.bind(this)}\n          moveCurrentStepIndex={this.moveCurrentStepIndex.bind(this)}\n          getProgress={this.getProgress}\n        />\n      </div>\n    )\n  }\n}\n\nfunction last(array) {\n  return array[array.length - 1]\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App\";\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n"],"sourceRoot":""}