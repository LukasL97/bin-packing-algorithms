{"version":3,"sources":["components/Header.jsx","components/Input/NumericalInputFormRow.jsx","utils/AlgorithmStrategies.js","components/Input/AlgorithmInput/StrategySelectorFormRow.jsx","components/Input/AlgorithmInput/AlgorithmInputForm.jsx","components/Box.jsx","components/AlgorithmDisplay.jsx","components/Input/VisualizationConfig/VisualizationConfigForm.jsx","components/AlgorithmProgressChart.jsx","components/Content.jsx","client/BackendClient.js","utils/SolutionStepUtil.js","components/App.jsx","index.js"],"names":["Header","className","NumericalInputFormRow","props","label","name","value","onChange","htmlFor","id","type","AlgorithmStrategies","this","getAll","StrategySelectorFormRow","strategies","map","strat","onLoad","AlgorithmInputForm","handleNumericalInputChange","handleInputChange","parseInt","handleTextualInputChange","v","state","strategy","getDefaultStrategyId","boxLength","numRectangles","minWidth","maxWidth","minHeight","maxHeight","valueParser","inputId","event","setState","oldState","target","preventDefault","start","bind","onClick","startWithoutPageRefresh","Component","Box","boxFillColor","boxBorderColor","rectangleFillColorBase","rectangleFillColorLatestUpdate","rectangleBorderColor","rectangleOpacity","rectangleHighlightDuration","rectangleFillColormap","interpolate","self","unitLength","pixelLength","getRectangles","currentStep","unitToPixel","unit","rectangles","rectangle","colorProportion","Math","max","lastUpdate","x","y","width","height","fill","stroke","opacity","AlgorithmDisplay","getCurrentSolutionStep","getRectanglesLastUpdate","placement","boxPixelLength","rectangleId","undefined","boxId","filter","placing","box","coordinates","getRectanglesLastUpdateWithZeroDefault","boxes","Set","find","newSolutionStep","solution","console","log","step","runId","getUnique","sort","box1","box2","length","VisualizationConfigForm","visualizationIterationPeriod","visualizationIterationPeriodDefault","newPeriod","updateVisualizationIterationPeriod","handleMsPerIterationChange","AlgorithmProgressChart","progress","getProgress","series","data","fetched","visualized","options","chart","colors","plotOptions","bar","borderRadius","horizontal","dataLabels","style","xaxis","categories","finished","Content","BackendClient","apiUrl","process","axios","defaults","baseURL","info","callback","trace","put","rectanglesWidthRange","min","rectanglesHeightRange","then","startSolutionStep","minStep","maxStep","get","params","solutionSteps","SolutionStepUtil","placementA","placementB","rectangleIdComparator","placingA","placingB","zipSortedPlacementsByRectangleId","p","left","right","comp","slice","last","array","App","fetchSolutionStepsPeriod","fetchSolutionStepsCount","backendClient","running","fetchBlocked","solutionStepQueue","rectanglesLastUpdate","startAlgorithm","blockFetch","fetchSolutionSteps","lastLoadedStep","getUpdatedRectangleIdsInNewStep","oldSolutionStep","zipPlacementsByRectangleId","removeFirstSolutionStepFromQueue","newSolutionStepQueue","newRectanglesLastUpdate","forEach","clearInterval","removeFirstSolutionStepFromQueueInterval","setInterval","fetchSolutionStepsInterval","updateRemoveFirstSolutionStepFromQueueInterval","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa147e2b.chunk.js","sourcesContent":["const Header = () => {\n  return (\n    <div className=\"header-container\">\n      <header>\n        <h1>Bin Packing Algorithms</h1>\n      </header>\n    </div>\n  )\n}\n\nexport default Header\n","const NumericalInputFormRow = (props) => {\n\n  const {label, name, value, onChange} = props\n\n  return (\n    <div className=\"numerical-input-form-row\">\n      <label htmlFor={name}>{label}</label>\n      <input id={name} name={name} type=\"number\" value={value} onChange={onChange}/>\n    </div>\n  )\n}\n\nexport default NumericalInputFormRow","class AlgorithmStrategies {\n\n  static getAll() {\n    return [\n      {\n        id: 'greedy randomSelection',\n        name: 'Greedy - Random Selection'\n      },\n      {\n        id: 'greedy sizeOrdered',\n        name: 'Greedy - Size-ordered'\n      },\n      {\n        id: 'localSearch geometryBased',\n        name: 'Local Search - Geometry-based'\n      },\n      {\n        id: 'localSearch eventuallyFeasibleGeometryBased',\n        name: 'Local Search - Geometry-based (eventually feasible)'\n      }\n    ]\n  }\n\n  static getDefaultStrategyId() {\n    return this.getAll()[0].id\n  }\n\n}\n\nexport default AlgorithmStrategies\n","import AlgorithmStrategies from '../../../utils/AlgorithmStrategies'\n\nconst StrategySelectorFormRow = (props) => {\n\n  const strategies = AlgorithmStrategies.getAll().map(strat =>\n    <option key={strat.id} value={strat.id}>{strat.name}</option>\n  )\n\n  return (\n    <div className='strategy-selector-form-row'>\n      <select id='strategy' name='strategy' onChange={props.onChange} onLoad={props.onChange}>\n        {strategies}\n      </select>\n    </div>\n  )\n}\n\nexport default StrategySelectorFormRow","import React, {Component} from 'react'\nimport NumericalInputFormRow from \"../NumericalInputFormRow\";\nimport StrategySelectorFormRow from \"./StrategySelectorFormRow\";\nimport AlgorithmStrategies from \"../../../utils/AlgorithmStrategies\";\n\nclass AlgorithmInputForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      strategy: AlgorithmStrategies.getDefaultStrategyId(),\n      boxLength: \"\",\n      numRectangles: \"\",\n      minWidth: \"\",\n      maxWidth: \"\",\n      minHeight: \"\",\n      maxHeight: \"\"\n    }\n  }\n\n  handleInputChange(valueParser) {\n    return (inputId) => {\n      return (event) => {\n        this.setState(oldState => (\n          {\n            ...oldState,\n            [inputId]: valueParser(event.target.value)\n          }\n        ))\n      }\n    }\n  }\n\n  handleNumericalInputChange = this.handleInputChange(parseInt)\n  handleTextualInputChange = this.handleInputChange(v => v)\n\n  startWithoutPageRefresh(event) {\n    event.preventDefault()\n    this.props.start(\n      this.state.strategy,\n      this.state.boxLength,\n      this.state.numRectangles,\n      this.state.minWidth,\n      this.state.maxWidth,\n      this.state.minHeight,\n      this.state.maxHeight\n    )\n  }\n\n  render() {\n\n    return (\n      <div className=\"input-container-element input-form\">\n        <h3>Algorithm Input</h3>\n        <form>\n          <StrategySelectorFormRow onChange={this.handleTextualInputChange('strategy').bind(this)}/>\n          <NumericalInputFormRow\n            label={\"Box Length\"}\n            name={\"box-length\"}\n            value={this.state.boxLength}\n            onChange={this.handleNumericalInputChange('boxLength').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={\"Number of Rectangles\"}\n            name={\"num-rectangles\"}\n            value={this.state.numRectangles}\n            onChange={this.handleNumericalInputChange('numRectangles').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={\"Min. Width\"}\n            name={\"min-width\"}\n            value={this.state.minWidth}\n            onChange={this.handleNumericalInputChange('minWidth').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={\"Max. Width\"}\n            name={\"max-width\"}\n            value={this.state.maxWidth}\n            onChange={this.handleNumericalInputChange('maxWidth').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={\"Min. Height\"}\n            name={\"min-height\"}\n            value={this.state.minHeight}\n            onChange={this.handleNumericalInputChange('minHeight').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={\"Max. Height\"}\n            name={\"max-height\"}\n            value={this.state.maxHeight}\n            onChange={this.handleNumericalInputChange('maxHeight').bind(this)}\n          />\n          <div className=\"input-form-button-container\">\n            <button onClick={this.startWithoutPageRefresh.bind(this)}>Start</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n\n}\n\nexport default AlgorithmInputForm","import React, {Component} from 'react'\nimport {Group, Layer, Rect, Stage} from \"react-konva\";\nimport interpolate from 'color-interpolate'\n\nclass Box extends Component {\n\n  boxFillColor = 'white'\n  boxBorderColor = 'black'\n\n  rectangleFillColorBase = '#D6E9FE'\n  rectangleFillColorLatestUpdate = '#5995DA'\n  rectangleBorderColor = 'black'\n  rectangleOpacity = 0.7\n\n  rectangleHighlightDuration = 10\n  rectangleFillColormap = interpolate([this.rectangleFillColorBase, this.rectangleFillColorLatestUpdate])\n\n  render() {\n    const self = this\n\n    const {id, unitLength, pixelLength, getRectangles, currentStep} = this.props\n\n    function unitToPixel(unit) {\n      return unit / unitLength * pixelLength\n    }\n\n    function getRectShape(rectangle) {\n      const colorProportion = Math.max(\n        0.0,\n        (rectangle.lastUpdate - currentStep + self.rectangleHighlightDuration) / self.rectangleHighlightDuration\n      )\n      return (\n        <Rect\n          x={unitToPixel(rectangle.x)}\n          y={unitToPixel(rectangle.y)}\n          width={unitToPixel(rectangle.width)}\n          height={unitToPixel(rectangle.height)}\n          fill={self.rectangleFillColormap(colorProportion)}\n          stroke={self.rectangleBorderColor}\n          opacity={self.rectangleOpacity}\n        />\n      )\n    }\n\n    const rectangles = getRectangles().map(getRectShape)\n\n    return (\n      <div className=\"box\" id={id}>\n        <Stage width={pixelLength} height={pixelLength}>\n          <Layer>\n            <Rect\n              x={0}\n              y={0}\n              width={pixelLength}\n              height={pixelLength}\n              fill={this.boxFillColor}\n              stroke={this.boxBorderColor}\n            />\n            <Group x={0} y={0}>\n              {rectangles}\n            </Group>\n          </Layer>\n        </Stage>\n      </div>\n    )\n  }\n}\n\nexport default Box","import React, {Component} from 'react'\nimport Box from \"./Box\"\n\nclass AlgorithmDisplay extends Component {\n\n  getCurrentSolutionStep = this.props.getCurrentSolutionStep\n  getRectanglesLastUpdate = this.props.getRectanglesLastUpdate\n\n  state = {\n    placement: []\n  }\n\n  boxPixelLength = 300\n\n  getRectanglesLastUpdateWithZeroDefault(rectangleId) {\n    const lastUpdate = this.getRectanglesLastUpdate()[rectangleId]\n    return lastUpdate !== undefined ? lastUpdate : 0\n  }\n\n  getRectangles(boxId) {\n    return () => this.state.placement\n      .filter(placing => placing.box.id === boxId)\n      .map(placing => {\n        return {\n          x: placing.coordinates.x,\n          y: placing.coordinates.y,\n          width: placing.rectangle.width,\n          height: placing.rectangle.height,\n          lastUpdate: this.getRectanglesLastUpdateWithZeroDefault(placing.rectangle.id)\n        }\n      })\n  }\n\n  getUnique(boxes) {\n    return [...new Set(boxes.map(box => box.id))].map(id => boxes.find(box => box.id === id))\n  }\n\n  render() {\n\n    const newSolutionStep = this.getCurrentSolutionStep()\n\n    if (newSolutionStep !== undefined && newSolutionStep.solution.placement !== this.state.placement) {\n      this.setState({\n        placement: newSolutionStep.solution.placement\n      })\n      console.log(\"Visualize solution step \" + newSolutionStep.step + \" for run with id \" + newSolutionStep.runId)\n    }\n\n    const boxes = this.getUnique(this.state.placement.map(placing => placing.box))\n      .sort((box1, box2) => box1.id - box2.id)\n      .map(box => (\n        <Box\n          id={box.id}\n          unitLength={box.length}\n          pixelLength={this.boxPixelLength}\n          getRectangles={this.getRectangles(box.id)}\n          currentStep={newSolutionStep.step}\n        />\n      ))\n\n    return (\n      <div className=\"algorithm-display\">\n        <div className=\"boxes-container\">\n          {boxes}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default AlgorithmDisplay","import React, {Component} from 'react'\nimport NumericalInputFormRow from '../NumericalInputFormRow'\n\nclass VisualizationConfigForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      visualizationIterationPeriod: this.props.visualizationIterationPeriodDefault\n    }\n  }\n\n  handleMsPerIterationChange(event) {\n    const newPeriod = event.target.value\n    this.setState({\n      visualizationIterationPeriod: newPeriod\n    })\n    this.props.updateVisualizationIterationPeriod(newPeriod)\n  }\n\n  render() {\n    return (\n      <div className=\"input-container-element visualization-config-form\">\n        <h3>Visualization Config</h3>\n        <form>\n          <NumericalInputFormRow\n            label={'ms / Iteration'}\n            name={'ms-per-iteration'}\n            value={this.state.visualizationIterationPeriod}\n            onChange={this.handleMsPerIterationChange.bind(this)}\n          />\n        </form>\n      </div>\n    )\n  }\n\n}\n\nexport default VisualizationConfigForm\n","import Chart from 'react-apexcharts'\nimport React from 'react'\n\nconst AlgorithmProgressChart = (props) => {\n\n  const progress = props.getProgress()\n\n  const series = [{\n    data: [progress.fetched, progress.visualized]\n  }]\n\n  const options = {\n    chart: {\n      type: 'bar'\n    },\n    colors: ['#5995DA'],\n    plotOptions: {\n      bar: {\n        borderRadius: 4,\n        horizontal: true\n      }\n    },\n    dataLabels: {\n      style: {\n        colors: ['black']\n      }\n    },\n    xaxis: {\n      categories: [\n        'Fetched',\n        'Visualized'\n      ]\n    }\n  }\n\n  return (\n    <div className=\"input-container-element progress-chart-container\">\n      <h3>Algorithm Progress</h3>\n      <Chart options={options} series={series} type=\"bar\"/>\n      <div className=\"progress-chart-finished-indicators\">\n        {progress.finished ? <p>Computation complete</p> : null}\n        {(progress.finished && progress.visualized === progress.fetched) ? <p>Visualization complete</p> : null}\n      </div>\n    </div>\n  )\n\n}\n\nexport default AlgorithmProgressChart","import React, {Component} from 'react'\nimport AlgorithmInputForm from './Input/AlgorithmInput/AlgorithmInputForm'\nimport AlgorithmDisplay from './AlgorithmDisplay'\nimport VisualizationConfigForm from './Input/VisualizationConfig/VisualizationConfigForm'\nimport AlgorithmProgressChart from './AlgorithmProgressChart'\n\n\nclass Content extends Component {\n\n  render() {\n    const {\n      getCurrentSolutionStep,\n      getRectanglesLastUpdate,\n      start,\n      visualizationIterationPeriodDefault,\n      updateVisualizationIterationPeriod,\n      getProgress\n    } = this.props\n\n    return (\n      <div className=\"content-container\">\n        <div className=\"input-container\">\n          <AlgorithmInputForm start={start}/>\n          <VisualizationConfigForm\n            visualizationIterationPeriodDefault={visualizationIterationPeriodDefault}\n            updateVisualizationIterationPeriod={updateVisualizationIterationPeriod}\n          />\n          <AlgorithmProgressChart getProgress={getProgress}/>\n        </div>\n        <AlgorithmDisplay\n          getCurrentSolutionStep={getCurrentSolutionStep}\n          getRectanglesLastUpdate={getRectanglesLastUpdate}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Content\n","import axios from \"axios\";\n\nclass BackendClient {\n\n  constructor() {\n    let apiUrl = process.env.REACT_APP_API_URL\n    if (typeof apiUrl == 'undefined') {\n      apiUrl = 'http://localhost:9000'\n    }\n    axios.defaults.baseURL = apiUrl\n    console.info('Setup API connection to ' + axios.defaults.baseURL)\n  }\n\n  startAlgorithm(strategy, boxLength, numRectangles, minWidth, maxWidth, minHeight, maxHeight) {\n    return (callback) => {\n      console.trace('Starting algorithm')\n      axios.put(\n        '/binPacking/start',\n        {\n          strategy: strategy,\n          boxLength: boxLength,\n          numRectangles: numRectangles,\n          rectanglesWidthRange: {\n            min: minWidth,\n            max: maxWidth\n          },\n          rectanglesHeightRange: {\n            min: minHeight,\n            max: maxHeight\n          }\n        }\n      ).then(startSolutionStep => callback(startSolutionStep))\n    }\n  }\n\n  fetchSolutionSteps(runId, minStep, maxStep) {\n    return (callback) => {\n      console.trace('Fetching steps ' + minStep  + ' - ' + maxStep + ' for runId ' + runId)\n      axios.get(\n        '/binPacking/steps',\n        {\n          params: {\n            runId: runId,\n            minStep: minStep,\n            maxStep: maxStep\n          }\n        }\n      ).then(solutionSteps => callback(solutionSteps))\n    }\n  }\n\n}\n\nexport default BackendClient","class SolutionStepUtil {\n\n  static zipPlacementsByRectangleId(placementA, placementB) {\n\n    function rectangleIdComparator(placingA, placingB) {\n      return placingA.rectangle.id - placingB.rectangle.id\n    }\n\n    function zipSortedPlacementsByRectangleId(placementA, placementB) {\n      if (placementA.length === 0) {\n        return placementB.map(p => {\n          return {\n            left: null,\n            right: p\n          }\n        })\n      }\n      if (placementB.length === 0) {\n        return placementA.map(p => {\n          return {\n            left: p,\n            right: null\n          }\n        })\n      }\n      const placingA = placementA[0]\n      const placingB = placementB[0]\n      const comp = rectangleIdComparator(placingA, placingB)\n      if (comp === 0) {\n        return [\n          {\n            left: placingA,\n            right: placingB\n          },\n          ...zipSortedPlacementsByRectangleId(placementA.slice(1), placementB.slice(1))\n        ]\n      } else if (comp < 0) {\n        return [\n          {\n            left: placingA,\n            right: null\n          },\n          ...zipSortedPlacementsByRectangleId(placementA.slice(1), placementB)\n        ]\n      } else {\n        return [\n          {\n            left: null,\n            right: placingB\n          },\n          ...zipSortedPlacementsByRectangleId(placementA, placementB.slice(1))\n        ]\n      }\n    }\n\n    const placementASorted = [...placementA].sort(rectangleIdComparator)\n    const placementBSorted = [...placementB].sort(rectangleIdComparator)\n\n    return zipSortedPlacementsByRectangleId(placementASorted, placementBSorted)\n  }\n\n}\n\nexport default SolutionStepUtil","import React, {Component} from 'react'\nimport Header from './Header'\nimport Content from './Content'\nimport BackendClient from '../client/BackendClient'\nimport SolutionStepUtil from '../utils/SolutionStepUtil'\n\nclass App extends Component {\n\n  fetchSolutionStepsPeriod = 100\n  fetchSolutionStepsCount = 100\n  visualizationIterationPeriodDefault = 100\n\n  backendClient = new BackendClient()\n\n  state = {\n    running: false,\n    runId: '',\n    fetchBlocked: false,\n    solutionStepQueue: [],\n    rectanglesLastUpdate: {}\n  }\n\n  getCurrentSolutionStep = () => this.state.solutionStepQueue[0]\n  getRectanglesLastUpdate = () => this.state.rectanglesLastUpdate\n\n  getProgress = () => {\n    const fetched = last(this.state.solutionStepQueue)?.step\n    const visualized = this.state.solutionStepQueue[0]?.step\n    const finished = last(this.state.solutionStepQueue)?.finished\n    return {\n      fetched: fetched !== undefined ? fetched : 0,\n      visualized: visualized !== undefined ? visualized : 0,\n      finished: finished !== undefined ? finished : false\n    }\n  }\n\n  start = (\n    strategy,\n    boxLength,\n    numRectangles,\n    minWidth,\n    maxWidth,\n    minHeight,\n    maxHeight\n  ) => {\n    this.backendClient.startAlgorithm(\n      strategy,\n      boxLength,\n      numRectangles,\n      minWidth,\n      maxWidth,\n      minHeight,\n      maxHeight\n    )(startSolutionStep => {\n      console.log(startSolutionStep)\n      this.setState(oldState => ({\n        ...oldState,\n        running: true,\n        runId: startSolutionStep.data.runId,\n        solutionStepQueue: [startSolutionStep.data],\n        rectanglesLastUpdate: {}\n      }))\n    })\n  }\n\n  blockFetch = () => {\n    this.setState(oldState => ({\n      ...oldState,\n      fetchBlocked: true\n    }))\n  }\n\n  fetchSolutionSteps = () => {\n    this.blockFetch() // block fetching until fetched data is retrieved via the api and stored in the queue\n    const lastLoadedStep = last(this.state.solutionStepQueue).step\n    this.backendClient.fetchSolutionSteps(\n      this.state.runId,\n      lastLoadedStep + 1,\n      lastLoadedStep + this.fetchSolutionStepsCount\n    )(solutionSteps => {\n      console.log(solutionSteps)\n      const finished = solutionSteps.data.length > 0 && last(solutionSteps.data).finished\n      this.setState(oldState => ({\n        ...oldState,\n        running: !finished,\n        fetchBlocked: false,\n        solutionStepQueue: [\n          ...this.state.solutionStepQueue,\n          ...solutionSteps.data\n        ]\n      }))\n    })\n  }\n\n  getUpdatedRectangleIdsInNewStep = (oldSolutionStep, newSolutionStep) => {\n    const zippedPlacements = SolutionStepUtil.zipPlacementsByRectangleId(\n      oldSolutionStep.solution.placement,\n      newSolutionStep.solution.placement\n    )\n    return zippedPlacements.map(p => {\n      if (p.left === null) {\n        return p.right.rectangle.id\n      } else if (p.right === null || p.left.coordinates.x !== p.right.coordinates.x || p.left.coordinates.y !== p.right.coordinates.y) {\n        return p.left.rectangle.id\n      } else {\n        return null\n      }\n    }).filter(id => id !== null)\n  }\n\n  removeFirstSolutionStepFromQueue = () => {\n    if (this.state.solutionStepQueue.length > 1) {\n      const oldSolutionStep = this.state.solutionStepQueue[0]\n      const newSolutionStepQueue = this.state.solutionStepQueue.slice(1)\n      const newSolutionStep = newSolutionStepQueue[0]\n      const newRectanglesLastUpdate = {...this.state.rectanglesLastUpdate}\n      this.getUpdatedRectangleIdsInNewStep(oldSolutionStep, newSolutionStep).forEach(id => newRectanglesLastUpdate[id] = newSolutionStep.step)\n      this.setState(oldState => ({\n        ...oldState,\n        solutionStepQueue: newSolutionStepQueue,\n        rectanglesLastUpdate: newRectanglesLastUpdate\n      }))\n    }\n  }\n\n  updateRemoveFirstSolutionStepFromQueueInterval(visualizationIterationPeriod) {\n    clearInterval(this.removeFirstSolutionStepFromQueueInterval)\n    this.removeFirstSolutionStepFromQueueInterval = setInterval(\n      this.removeFirstSolutionStepFromQueue,\n      visualizationIterationPeriod\n    )\n  }\n\n  componentDidMount() {\n    this.fetchSolutionStepsInterval = setInterval(\n      () => {\n        if (this.state.running && !this.state.fetchBlocked) {\n          this.fetchSolutionSteps()\n        }\n      },\n      this.fetchSolutionStepsPeriod\n    )\n    this.removeFirstSolutionStepFromQueueInterval = setInterval(\n      this.removeFirstSolutionStepFromQueue,\n      this.visualizationIterationPeriodDefault\n    )\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetchSolutionStepsInterval)\n    clearInterval(this.removeFirstSolutionStepFromQueueInterval)\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <Header/>\n        <Content\n          getCurrentSolutionStep={this.getCurrentSolutionStep}\n          getRectanglesLastUpdate={this.getRectanglesLastUpdate}\n          start={this.start}\n          visualizationIterationPeriodDefault={this.visualizationIterationPeriodDefault}\n          updateVisualizationIterationPeriod={this.updateRemoveFirstSolutionStepFromQueueInterval.bind(this)}\n          getProgress={this.getProgress}\n        />\n      </div>\n    )\n  }\n}\n\nfunction last(array) {\n  return array[array.length - 1]\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App\";\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n"],"sourceRoot":""}