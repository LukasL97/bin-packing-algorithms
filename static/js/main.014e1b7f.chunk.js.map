{"version":3,"sources":["components/Header.jsx","components/AlgorithmInput/NumericalInputFormRow.jsx","utils/AlgorithmStrategies.js","components/AlgorithmInput/StrategySelectorFormRow.jsx","components/AlgorithmInput/AlgorithmInputForm.jsx","components/Box.jsx","components/AlgorithmDisplay.jsx","components/Content.jsx","client/BackendClient.js","utils/SolutionStepUtil.js","components/App.jsx","index.js"],"names":["Header","className","NumericalInputFormRow","props","label","name","value","onChange","htmlFor","id","type","AlgorithmStrategies","this","getAll","StrategySelectorFormRow","strategies","map","strat","onLoad","AlgorithmInputForm","handleNumericalInputChange","handleInputChange","parseInt","handleTextualInputChange","v","state","strategy","getDefaultStrategyId","boxLength","numRectangles","minWidth","maxWidth","minHeight","maxHeight","valueParser","inputId","event","setState","oldState","target","preventDefault","start","bind","onClick","startWithoutPageRefresh","Component","Box","boxFillColor","boxBorderColor","rectangleFillColorBase","rectangleFillColorLatestUpdate","rectangleBorderColor","rectangleHighlightDuration","rectangleFillColormap","interpolate","self","unitLength","pixelLength","getRectangles","currentStep","unitToPixel","unit","rectangles","rectangle","index","colorProportion","Math","max","lastUpdate","x","y","width","height","fill","stroke","getRectShape","AlgorithmDisplay","getCurrentSolutionStep","getRectanglesLastUpdate","placement","boxPixelLength","rectangleId","undefined","boxId","filter","placing","box","coordinates","getRectanglesLastUpdateWithZeroDefault","boxes","Set","find","newSolutionStep","solution","console","log","step","runId","getUnique","sort","box1","box2","Content","BackendClient","apiUrl","process","axios","defaults","baseURL","info","callback","trace","put","rectanglesWidthRange","min","rectanglesHeightRange","then","startSolutionStep","minStep","maxStep","get","params","solutionSteps","SolutionStepUtil","placementA","placementB","rectangleIdComparator","placingA","placingB","zipSortedPlacementsByRectangleId","length","p","left","right","comp","slice","last","array","App","fetchSolutionStepsPeriod","fetchSolutionStepsCount","removeFirstSolutionStepFromQueuePeriod","backendClient","running","fetchBlocked","solutionStepQueue","rectanglesLastUpdate","startAlgorithm","data","blockFetch","fetchSolutionSteps","lastLoadedStep","finished","getUpdatedRectangleIdsInNewStep","oldSolutionStep","zipPlacementsByRectangleId","removeFirstSolutionStepFromQueue","newSolutionStepQueue","newRectanglesLastUpdate","forEach","fetchSolutionStepsInterval","setInterval","removeFirstSolutionStepFromQueueInterval","clearInterval","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.014e1b7f.chunk.js","sourcesContent":["const Header = () => {\n  return (\n    <div className=\"header-container\">\n      <header>\n        <h1>Bin Packing Algorithms</h1>\n      </header>\n    </div>\n  )\n}\n\nexport default Header\n","const NumericalInputFormRow = (props) => {\n\n  const {label, name, value, onChange} = props\n\n  return (\n    <div className=\"numerical-input-form-row\">\n      <label htmlFor={name}>{label}</label>\n      <input id={name} name={name} type=\"number\" value={value} onChange={onChange}/>\n    </div>\n  )\n}\n\nexport default NumericalInputFormRow","class AlgorithmStrategies {\n\n  static getAll() {\n    return [\n      {\n        id: \"greedy randomSelection\",\n        name: \"Greedy - Random Selection\"\n      },\n      {\n        id: \"localSearch geometryBased\",\n        name: \"Local Search - Geometry-based\"\n      }\n    ]\n  }\n\n  static getDefaultStrategyId() {\n    return this.getAll()[0].id\n  }\n\n}\n\nexport default AlgorithmStrategies\n","import AlgorithmStrategies from \"../../utils/AlgorithmStrategies\";\n\nconst StrategySelectorFormRow = (props) => {\n\n  const strategies = AlgorithmStrategies.getAll().map(strat =>\n    <option key={strat.id} value={strat.id}>{strat.name}</option>\n  )\n\n  return (\n    <div className='strategy-selector-form-row'>\n      <select id='strategy' name='strategy' onChange={props.onChange} onLoad={props.onChange}>\n        {strategies}\n      </select>\n    </div>\n  )\n}\n\nexport default StrategySelectorFormRow","import React, {Component} from 'react'\nimport NumericalInputFormRow from \"./NumericalInputFormRow\";\nimport StrategySelectorFormRow from \"./StrategySelectorFormRow\";\nimport AlgorithmStrategies from \"../../utils/AlgorithmStrategies\";\n\nclass AlgorithmInputForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      strategy: AlgorithmStrategies.getDefaultStrategyId(),\n      boxLength: \"\",\n      numRectangles: \"\",\n      minWidth: \"\",\n      maxWidth: \"\",\n      minHeight: \"\",\n      maxHeight: \"\"\n    }\n  }\n\n  handleInputChange(valueParser) {\n    return (inputId) => {\n      return (event) => {\n        this.setState(oldState => (\n          {\n            ...oldState,\n            [inputId]: valueParser(event.target.value)\n          }\n        ))\n      }\n    }\n  }\n\n  handleNumericalInputChange = this.handleInputChange(parseInt)\n  handleTextualInputChange = this.handleInputChange(v => v)\n\n  startWithoutPageRefresh(event) {\n    event.preventDefault()\n    this.props.start(\n      this.state.strategy,\n      this.state.boxLength,\n      this.state.numRectangles,\n      this.state.minWidth,\n      this.state.maxWidth,\n      this.state.minHeight,\n      this.state.maxHeight\n    )\n  }\n\n  render() {\n\n    return (\n      <div className=\"algorithm-input-form\">\n        <form>\n          <StrategySelectorFormRow onChange={this.handleTextualInputChange('strategy').bind(this)}/>\n          <NumericalInputFormRow\n            label={\"Box Length\"}\n            name={\"box-length\"}\n            value={this.state.boxLength}\n            onChange={this.handleNumericalInputChange('boxLength').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={\"Number of Rectangles\"}\n            name={\"num-rectangles\"}\n            value={this.state.numRectangles}\n            onChange={this.handleNumericalInputChange('numRectangles').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={\"Min. Width\"}\n            name={\"min-width\"}\n            value={this.state.minWidth}\n            onChange={this.handleNumericalInputChange('minWidth').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={\"Max. Width\"}\n            name={\"max-width\"}\n            value={this.state.maxWidth}\n            onChange={this.handleNumericalInputChange('maxWidth').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={\"Min. Height\"}\n            name={\"min-height\"}\n            value={this.state.minHeight}\n            onChange={this.handleNumericalInputChange('minHeight').bind(this)}\n          />\n          <NumericalInputFormRow\n            label={\"Max. Height\"}\n            name={\"max-height\"}\n            value={this.state.maxHeight}\n            onChange={this.handleNumericalInputChange('maxHeight').bind(this)}\n          />\n          <button onClick={this.startWithoutPageRefresh.bind(this)}>Start</button>\n        </form>\n      </div>\n    )\n  }\n\n}\n\nexport default AlgorithmInputForm","import React, {Component} from 'react'\nimport {Group, Layer, Rect, Stage} from \"react-konva\";\nimport interpolate from 'color-interpolate'\n\nclass Box extends Component {\n\n  boxFillColor = 'white'\n  boxBorderColor = 'black'\n\n  rectangleFillColorBase = '#D6E9FE'\n  rectangleFillColorLatestUpdate = '#5995DA'\n  rectangleBorderColor = '#5995DA'\n\n  rectangleHighlightDuration = 10\n  rectangleFillColormap = interpolate([this.rectangleFillColorBase, this.rectangleFillColorLatestUpdate])\n\n  render() {\n    const self = this\n\n    const {id, unitLength, pixelLength, getRectangles, currentStep} = this.props\n\n    function unitToPixel(unit) {\n      return unit / unitLength * pixelLength\n    }\n\n    function getRectShape(rectangle) {\n      const colorProportion = Math.max(\n        0.0,\n        (rectangle.lastUpdate - currentStep + self.rectangleHighlightDuration) / self.rectangleHighlightDuration\n      )\n      return (\n        <Rect\n          x={unitToPixel(rectangle.x)}\n          y={unitToPixel(rectangle.y)}\n          width={unitToPixel(rectangle.width)}\n          height={unitToPixel(rectangle.height)}\n          fill={self.rectangleFillColormap(colorProportion)}\n          stroke={self.rectangleBorderColor}\n        />\n      )\n    }\n\n    const rectangles = getRectangles().map((rectangle, index) => getRectShape(rectangle))\n\n    return (\n      <div className=\"box\" id={id}>\n        <Stage width={pixelLength} height={pixelLength}>\n          <Layer>\n            <Rect\n              x={0}\n              y={0}\n              width={pixelLength}\n              height={pixelLength}\n              fill={this.boxFillColor}\n              stroke={this.boxBorderColor}\n            />\n            <Group x={0} y={0}>\n              {rectangles}\n            </Group>\n          </Layer>\n        </Stage>\n      </div>\n    )\n  }\n}\n\nexport default Box","import React, {Component} from 'react'\nimport Box from \"./Box\"\n\nclass AlgorithmDisplay extends Component {\n\n  getCurrentSolutionStep = this.props.getCurrentSolutionStep\n  getRectanglesLastUpdate = this.props.getRectanglesLastUpdate\n\n  state = {\n    placement: []\n  }\n\n  boxPixelLength = 300\n\n  getRectanglesLastUpdateWithZeroDefault(rectangleId) {\n    const lastUpdate = this.getRectanglesLastUpdate()[rectangleId]\n    return lastUpdate !== undefined ? lastUpdate : 0\n  }\n\n  getRectangles(boxId) {\n    return () => this.state.placement\n      .filter(placing => placing.box.id === boxId)\n      .map(placing => {\n        return {\n          x: placing.coordinates.x,\n          y: placing.coordinates.y,\n          width: placing.rectangle.width,\n          height: placing.rectangle.height,\n          lastUpdate: this.getRectanglesLastUpdateWithZeroDefault(placing.rectangle.id)\n        }\n      })\n  }\n\n  getUnique(boxes) {\n    return [...new Set(boxes.map(box => box.id))].map(id => boxes.find(box => box.id === id))\n  }\n\n  render() {\n\n    const newSolutionStep = this.getCurrentSolutionStep()\n\n    if (newSolutionStep !== undefined && newSolutionStep.solution.placement !== this.state.placement) {\n      this.setState({\n        placement: newSolutionStep.solution.placement\n      })\n      console.log(\"Visualize solution step \" + newSolutionStep.step + \" for run with id \" + newSolutionStep.runId)\n    }\n\n    const boxes = this.getUnique(this.state.placement.map(placing => placing.box))\n      .sort((box1, box2) => box1.id - box2.id)\n      .map(box => (\n        <Box\n          id={box.id}\n          unitLength={box.width}\n          pixelLength={this.boxPixelLength}\n          getRectangles={this.getRectangles(box.id)}\n          currentStep={newSolutionStep.step}\n        />\n      ))\n\n    return (\n      <div className=\"algorithm-display\">\n        <div className=\"boxes-container\">\n          {boxes}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default AlgorithmDisplay","import React, {Component} from 'react'\nimport AlgorithmInputForm from \"./AlgorithmInput/AlgorithmInputForm\";\nimport AlgorithmDisplay from \"./AlgorithmDisplay\";\n\n\nclass Content extends Component {\n\n  render() {\n    const {getCurrentSolutionStep, getRectanglesLastUpdate, start} = this.props\n\n    return (\n      <div className=\"content-container\">\n        <AlgorithmInputForm start={start}/>\n        <AlgorithmDisplay getCurrentSolutionStep={getCurrentSolutionStep} getRectanglesLastUpdate={getRectanglesLastUpdate}/>\n      </div>\n    )\n  }\n}\n\nexport default Content\n","import axios from \"axios\";\n\nclass BackendClient {\n\n  constructor() {\n    let apiUrl = process.env.REACT_APP_API_URL\n    if (typeof apiUrl == 'undefined') {\n      apiUrl = 'http://localhost:9000'\n    }\n    axios.defaults.baseURL = apiUrl\n    console.info('Setup API connection to ' + axios.defaults.baseURL)\n  }\n\n  startAlgorithm(strategy, boxLength, numRectangles, minWidth, maxWidth, minHeight, maxHeight) {\n    return (callback) => {\n      console.trace('Starting algorithm')\n      axios.put(\n        '/binPacking/start',\n        {\n          strategy: strategy,\n          boxLength: boxLength,\n          numRectangles: numRectangles,\n          rectanglesWidthRange: {\n            min: minWidth,\n            max: maxWidth\n          },\n          rectanglesHeightRange: {\n            min: minHeight,\n            max: maxHeight\n          }\n        }\n      ).then(startSolutionStep => callback(startSolutionStep))\n    }\n  }\n\n  fetchSolutionSteps(runId, minStep, maxStep) {\n    return (callback) => {\n      console.trace('Fetching steps ' + minStep  + ' - ' + maxStep + ' for runId ' + runId)\n      axios.get(\n        '/binPacking/steps',\n        {\n          params: {\n            runId: runId,\n            minStep: minStep,\n            maxStep: maxStep\n          }\n        }\n      ).then(solutionSteps => callback(solutionSteps))\n    }\n  }\n\n}\n\nexport default BackendClient","class SolutionStepUtil {\n\n  static zipPlacementsByRectangleId(placementA, placementB) {\n\n    function rectangleIdComparator(placingA, placingB) {\n      return placingA.rectangle.id - placingB.rectangle.id\n    }\n\n    function zipSortedPlacementsByRectangleId(placementA, placementB) {\n      if (placementA.length === 0) {\n        return placementB.map(p => {\n          return {\n            left: null,\n            right: p\n          }\n        })\n      }\n      if (placementB.length === 0) {\n        return placementA.map(p => {\n          return {\n            left: p,\n            right: null\n          }\n        })\n      }\n      const placingA = placementA[0]\n      const placingB = placementB[0]\n      const comp = rectangleIdComparator(placingA, placingB)\n      if (comp === 0) {\n        return [\n          {\n            left: placingA,\n            right: placingB\n          },\n          ...zipSortedPlacementsByRectangleId(placementA.slice(1), placementB.slice(1))\n        ]\n      } else if (comp < 0) {\n        return [\n          {\n            left: placingA,\n            right: null\n          },\n          ...zipSortedPlacementsByRectangleId(placementA.slice(1), placementB)\n        ]\n      } else {\n        return [\n          {\n            left: null,\n            right: placingB\n          },\n          ...zipSortedPlacementsByRectangleId(placementA, placementB.slice(1))\n        ]\n      }\n    }\n\n    const placementASorted = [...placementA].sort(rectangleIdComparator)\n    const placementBSorted = [...placementB].sort(rectangleIdComparator)\n\n    return zipSortedPlacementsByRectangleId(placementASorted, placementBSorted)\n  }\n\n}\n\nexport default SolutionStepUtil","import React, {Component} from 'react'\nimport Header from \"./Header\";\nimport Content from \"./Content\";\nimport BackendClient from \"../client/BackendClient\";\nimport SolutionStepUtil from \"../utils/SolutionStepUtil\";\n\nclass App extends Component {\n\n  fetchSolutionStepsPeriod = 100\n  fetchSolutionStepsCount = 100\n  removeFirstSolutionStepFromQueuePeriod = 100\n\n  backendClient = new BackendClient()\n\n  state = {\n    running: false,\n    runId: \"\",\n    fetchBlocked: false,\n    solutionStepQueue: [],\n    rectanglesLastUpdate: {}\n  }\n\n  getCurrentSolutionStep = () => this.state.solutionStepQueue[0]\n  getRectanglesLastUpdate = () => this.state.rectanglesLastUpdate\n\n  start = (\n    strategy,\n    boxLength,\n    numRectangles,\n    minWidth,\n    maxWidth,\n    minHeight,\n    maxHeight\n  ) => {\n    this.backendClient.startAlgorithm(\n      strategy,\n      boxLength,\n      numRectangles,\n      minWidth,\n      maxWidth,\n      minHeight,\n      maxHeight\n    )(startSolutionStep => {\n      console.log(startSolutionStep)\n      this.setState(oldState => ({\n        ...oldState,\n        running: true,\n        runId: startSolutionStep.data.runId,\n        solutionStepQueue: [startSolutionStep.data],\n        rectanglesLastUpdate: {}\n      }))\n    })\n  }\n\n  blockFetch = () => {\n    this.setState(oldState => ({\n      ...oldState,\n      fetchBlocked: true\n    }))\n  }\n\n  fetchSolutionSteps = () => {\n    this.blockFetch() // block fetching until fetched data is retrieved via the api and stored in the queue\n    const lastLoadedStep = last(this.state.solutionStepQueue).step\n    this.backendClient.fetchSolutionSteps(\n      this.state.runId,\n      lastLoadedStep + 1,\n      lastLoadedStep + this.fetchSolutionStepsCount\n    )(solutionSteps => {\n      console.log(solutionSteps)\n      const finished = solutionSteps.data.length > 0 && last(solutionSteps.data).finished\n      this.setState(oldState => ({\n        ...oldState,\n        running: !finished,\n        fetchBlocked: false,\n        solutionStepQueue: [\n          ...this.state.solutionStepQueue,\n          ...solutionSteps.data\n        ]\n      }))\n    })\n  }\n\n  getUpdatedRectangleIdsInNewStep = (oldSolutionStep, newSolutionStep) => {\n    const zippedPlacements = SolutionStepUtil.zipPlacementsByRectangleId(\n      oldSolutionStep.solution.placement,\n      newSolutionStep.solution.placement\n    )\n    return zippedPlacements.map(p => {\n      if (p.left === null) {\n        return p.right.rectangle.id\n      } else if (p.right === null || p.left.coordinates.x !== p.right.coordinates.x || p.left.coordinates.y !== p.right.coordinates.y) {\n        return p.left.rectangle.id\n      } else {\n        return null\n      }\n    }).filter(id => id !== null)\n  }\n\n  removeFirstSolutionStepFromQueue = () => {\n    if (this.state.solutionStepQueue.length > 1) {\n      const oldSolutionStep = this.state.solutionStepQueue[0]\n      const newSolutionStepQueue = this.state.solutionStepQueue.slice(1)\n      const newSolutionStep = newSolutionStepQueue[0]\n      const newRectanglesLastUpdate = {...this.state.rectanglesLastUpdate}\n      this.getUpdatedRectangleIdsInNewStep(oldSolutionStep, newSolutionStep).forEach(id => newRectanglesLastUpdate[id] = newSolutionStep.step)\n      this.setState(oldState => ({\n        ...oldState,\n        solutionStepQueue: newSolutionStepQueue,\n        rectanglesLastUpdate: newRectanglesLastUpdate\n      }))\n    }\n  }\n\n  componentDidMount() {\n    this.fetchSolutionStepsInterval = setInterval(\n      () => {\n        if (this.state.running && !this.state.fetchBlocked) {\n          this.fetchSolutionSteps()\n        }\n      },\n      this.fetchSolutionStepsPeriod\n    )\n    this.removeFirstSolutionStepFromQueueInterval = setInterval(\n      this.removeFirstSolutionStepFromQueue,\n      this.removeFirstSolutionStepFromQueuePeriod\n    )\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.fetchSolutionStepsInterval)\n    clearInterval(this.removeFirstSolutionStepFromQueueInterval)\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <Header/>\n        <Content\n          getCurrentSolutionStep={this.getCurrentSolutionStep}\n          getRectanglesLastUpdate={this.getRectanglesLastUpdate}\n          start={this.start}\n        />\n      </div>\n    )\n  }\n}\n\nfunction last(array) {\n  return array[array.length - 1]\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App\";\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n"],"sourceRoot":""}